#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace com.mxply.app.baseball.lib.model
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="db")]
	public partial class baseballDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertFederation(Federation instance);
    partial void UpdateFederation(Federation instance);
    partial void DeleteFederation(Federation instance);
    partial void InsertClub(Club instance);
    partial void UpdateClub(Club instance);
    partial void DeleteClub(Club instance);
    partial void InsertTypeLicense(TypeLicense instance);
    partial void UpdateTypeLicense(TypeLicense instance);
    partial void DeleteTypeLicense(TypeLicense instance);
    partial void InsertFederation1(Federation1 instance);
    partial void UpdateFederation1(Federation1 instance);
    partial void DeleteFederation1(Federation1 instance);
    partial void InsertLicense(License instance);
    partial void UpdateLicense(License instance);
    partial void DeleteLicense(License instance);
    partial void InsertLicenseCounter(LicenseCounter instance);
    partial void UpdateLicenseCounter(LicenseCounter instance);
    partial void DeleteLicenseCounter(LicenseCounter instance);
    partial void InsertPerson(Person instance);
    partial void UpdatePerson(Person instance);
    partial void DeletePerson(Person instance);
    partial void InsertTeam(Team instance);
    partial void UpdateTeam(Team instance);
    partial void DeleteTeam(Team instance);
    #endregion
		
		public baseballDataContext() : 
				base(global::com.mxply.app.baseball.lib.Properties.Settings.Default.dbConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public baseballDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public baseballDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public baseballDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public baseballDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Federation> Federations
		{
			get
			{
				return this.GetTable<Federation>();
			}
		}
		
		public System.Data.Linq.Table<Club> Clubs
		{
			get
			{
				return this.GetTable<Club>();
			}
		}
		
		public System.Data.Linq.Table<TypeLicense> TypeLicenses
		{
			get
			{
				return this.GetTable<TypeLicense>();
			}
		}
		
		public System.Data.Linq.Table<Federation1> Federation1s
		{
			get
			{
				return this.GetTable<Federation1>();
			}
		}
		
		public System.Data.Linq.Table<License> Licenses
		{
			get
			{
				return this.GetTable<License>();
			}
		}
		
		public System.Data.Linq.Table<LicenseCounter> LicenseCounters
		{
			get
			{
				return this.GetTable<LicenseCounter>();
			}
		}
		
		public System.Data.Linq.Table<Person> Persons
		{
			get
			{
				return this.GetTable<Person>();
			}
		}
		
		public System.Data.Linq.Table<Team> Teams
		{
			get
			{
				return this.GetTable<Team>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Federation")]
	public partial class Federation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _Id;
		
		private string _Name;
		
		private EntitySet<Club> _Clubs;
		
		private EntitySet<License> _Licenses;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(System.Guid value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Federation()
		{
			this._Clubs = new EntitySet<Club>(new Action<Club>(this.attach_Clubs), new Action<Club>(this.detach_Clubs));
			this._Licenses = new EntitySet<License>(new Action<License>(this.attach_Licenses), new Action<License>(this.detach_Licenses));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Federation_Club", Storage="_Clubs", ThisKey="Id", OtherKey="FederationId")]
		public EntitySet<Club> Clubs
		{
			get
			{
				return this._Clubs;
			}
			set
			{
				this._Clubs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Federation_License", Storage="_Licenses", ThisKey="Id", OtherKey="FederationId")]
		public EntitySet<License> Licenses
		{
			get
			{
				return this._Licenses;
			}
			set
			{
				this._Licenses.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Clubs(Club entity)
		{
			this.SendPropertyChanging();
			entity.Federation = this;
		}
		
		private void detach_Clubs(Club entity)
		{
			this.SendPropertyChanging();
			entity.Federation = null;
		}
		
		private void attach_Licenses(License entity)
		{
			this.SendPropertyChanging();
			entity.Federation = this;
		}
		
		private void detach_Licenses(License entity)
		{
			this.SendPropertyChanging();
			entity.Federation = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Club")]
	public partial class Club : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _Id;
		
		private string _Name;
		
		private System.Guid _FederationId;
		
		private EntitySet<Team> _Teams;
		
		private EntityRef<Federation> _Federation;
		
		private EntityRef<Federation1> _Federation1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(System.Guid value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnFederationIdChanging(System.Guid value);
    partial void OnFederationIdChanged();
    #endregion
		
		public Club()
		{
			this._Teams = new EntitySet<Team>(new Action<Team>(this.attach_Teams), new Action<Team>(this.detach_Teams));
			this._Federation = default(EntityRef<Federation>);
			this._Federation1 = default(EntityRef<Federation1>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FederationId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid FederationId
		{
			get
			{
				return this._FederationId;
			}
			set
			{
				if ((this._FederationId != value))
				{
					if ((this._Federation.HasLoadedOrAssignedValue || this._Federation1.HasLoadedOrAssignedValue))
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFederationIdChanging(value);
					this.SendPropertyChanging();
					this._FederationId = value;
					this.SendPropertyChanged("FederationId");
					this.OnFederationIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Club_Team", Storage="_Teams", ThisKey="Id", OtherKey="ClubId")]
		public EntitySet<Team> Teams
		{
			get
			{
				return this._Teams;
			}
			set
			{
				this._Teams.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Federation_Club", Storage="_Federation", ThisKey="FederationId", OtherKey="Id", IsForeignKey=true)]
		public Federation Federation
		{
			get
			{
				return this._Federation.Entity;
			}
			set
			{
				Federation previousValue = this._Federation.Entity;
				if (((previousValue != value) 
							|| (this._Federation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Federation.Entity = null;
						previousValue.Clubs.Remove(this);
					}
					this._Federation.Entity = value;
					if ((value != null))
					{
						value.Clubs.Add(this);
						this._FederationId = value.Id;
					}
					else
					{
						this._FederationId = default(System.Guid);
					}
					this.SendPropertyChanged("Federation");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Federation1_Club", Storage="_Federation1", ThisKey="FederationId", OtherKey="Id", IsForeignKey=true)]
		public Federation1 Federation1
		{
			get
			{
				return this._Federation1.Entity;
			}
			set
			{
				Federation1 previousValue = this._Federation1.Entity;
				if (((previousValue != value) 
							|| (this._Federation1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Federation1.Entity = null;
						previousValue.Clubs.Remove(this);
					}
					this._Federation1.Entity = value;
					if ((value != null))
					{
						value.Clubs.Add(this);
						this._FederationId = value.Id;
					}
					else
					{
						this._FederationId = default(System.Guid);
					}
					this.SendPropertyChanged("Federation1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Teams(Team entity)
		{
			this.SendPropertyChanging();
			entity.Club = this;
		}
		
		private void detach_Teams(Team entity)
		{
			this.SendPropertyChanging();
			entity.Club = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TypeLicense")]
	public partial class TypeLicense : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _Id;
		
		private string _Name;
		
		private int _InternalId;
		
		private EntitySet<License> _Licenses;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(System.Guid value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnInternalIdChanging(int value);
    partial void OnInternalIdChanged();
    #endregion
		
		public TypeLicense()
		{
			this._Licenses = new EntitySet<License>(new Action<License>(this.attach_Licenses), new Action<License>(this.detach_Licenses));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InternalId", DbType="Int NOT NULL")]
		public int InternalId
		{
			get
			{
				return this._InternalId;
			}
			set
			{
				if ((this._InternalId != value))
				{
					this.OnInternalIdChanging(value);
					this.SendPropertyChanging();
					this._InternalId = value;
					this.SendPropertyChanged("InternalId");
					this.OnInternalIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TypeLicense_License", Storage="_Licenses", ThisKey="Id", OtherKey="TypeId")]
		public EntitySet<License> Licenses
		{
			get
			{
				return this._Licenses;
			}
			set
			{
				this._Licenses.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Licenses(License entity)
		{
			this.SendPropertyChanging();
			entity.TypeLicense = this;
		}
		
		private void detach_Licenses(License entity)
		{
			this.SendPropertyChanging();
			entity.TypeLicense = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Federation")]
	public partial class Federation1 : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _Id;
		
		private string _Name;
		
		private EntitySet<Club> _Clubs;
		
		private EntitySet<License> _Licenses;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(System.Guid value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Federation1()
		{
			this._Clubs = new EntitySet<Club>(new Action<Club>(this.attach_Clubs), new Action<Club>(this.detach_Clubs));
			this._Licenses = new EntitySet<License>(new Action<License>(this.attach_Licenses), new Action<License>(this.detach_Licenses));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Federation1_Club", Storage="_Clubs", ThisKey="Id", OtherKey="FederationId")]
		public EntitySet<Club> Clubs
		{
			get
			{
				return this._Clubs;
			}
			set
			{
				this._Clubs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Federation1_License", Storage="_Licenses", ThisKey="Id", OtherKey="FederationId")]
		public EntitySet<License> Licenses
		{
			get
			{
				return this._Licenses;
			}
			set
			{
				this._Licenses.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Clubs(Club entity)
		{
			this.SendPropertyChanging();
			entity.Federation1 = this;
		}
		
		private void detach_Clubs(Club entity)
		{
			this.SendPropertyChanging();
			entity.Federation1 = null;
		}
		
		private void attach_Licenses(License entity)
		{
			this.SendPropertyChanging();
			entity.Federation1 = this;
		}
		
		private void detach_Licenses(License entity)
		{
			this.SendPropertyChanging();
			entity.Federation1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.License")]
	public partial class License : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _Id;
		
		private System.Guid _FederationId;
		
		private System.Guid _PersonId;
		
		private System.DateTime _Date;
		
		private System.Guid _TypeId;
		
		private int _Number;
		
		private EntityRef<Federation> _Federation;
		
		private EntityRef<Federation1> _Federation1;
		
		private EntityRef<TypeLicense> _TypeLicense;
		
		private EntityRef<Person> _Person;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(System.Guid value);
    partial void OnIdChanged();
    partial void OnFederationIdChanging(System.Guid value);
    partial void OnFederationIdChanged();
    partial void OnPersonIdChanging(System.Guid value);
    partial void OnPersonIdChanged();
    partial void OnDateChanging(System.DateTime value);
    partial void OnDateChanged();
    partial void OnTypeIdChanging(System.Guid value);
    partial void OnTypeIdChanged();
    partial void OnNumberChanging(int value);
    partial void OnNumberChanged();
    #endregion
		
		public License()
		{
			this._Federation = default(EntityRef<Federation>);
			this._Federation1 = default(EntityRef<Federation1>);
			this._TypeLicense = default(EntityRef<TypeLicense>);
			this._Person = default(EntityRef<Person>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FederationId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid FederationId
		{
			get
			{
				return this._FederationId;
			}
			set
			{
				if ((this._FederationId != value))
				{
					if ((this._Federation.HasLoadedOrAssignedValue || this._Federation1.HasLoadedOrAssignedValue))
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFederationIdChanging(value);
					this.SendPropertyChanging();
					this._FederationId = value;
					this.SendPropertyChanged("FederationId");
					this.OnFederationIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PersonId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid PersonId
		{
			get
			{
				return this._PersonId;
			}
			set
			{
				if ((this._PersonId != value))
				{
					if (this._Person.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPersonIdChanging(value);
					this.SendPropertyChanging();
					this._PersonId = value;
					this.SendPropertyChanged("PersonId");
					this.OnPersonIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="Date NOT NULL")]
		public System.DateTime Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TypeId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid TypeId
		{
			get
			{
				return this._TypeId;
			}
			set
			{
				if ((this._TypeId != value))
				{
					if (this._TypeLicense.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTypeIdChanging(value);
					this.SendPropertyChanging();
					this._TypeId = value;
					this.SendPropertyChanged("TypeId");
					this.OnTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Number", DbType="Int NOT NULL")]
		public int Number
		{
			get
			{
				return this._Number;
			}
			set
			{
				if ((this._Number != value))
				{
					this.OnNumberChanging(value);
					this.SendPropertyChanging();
					this._Number = value;
					this.SendPropertyChanged("Number");
					this.OnNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Federation_License", Storage="_Federation", ThisKey="FederationId", OtherKey="Id", IsForeignKey=true)]
		public Federation Federation
		{
			get
			{
				return this._Federation.Entity;
			}
			set
			{
				Federation previousValue = this._Federation.Entity;
				if (((previousValue != value) 
							|| (this._Federation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Federation.Entity = null;
						previousValue.Licenses.Remove(this);
					}
					this._Federation.Entity = value;
					if ((value != null))
					{
						value.Licenses.Add(this);
						this._FederationId = value.Id;
					}
					else
					{
						this._FederationId = default(System.Guid);
					}
					this.SendPropertyChanged("Federation");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Federation1_License", Storage="_Federation1", ThisKey="FederationId", OtherKey="Id", IsForeignKey=true)]
		public Federation1 Federation1
		{
			get
			{
				return this._Federation1.Entity;
			}
			set
			{
				Federation1 previousValue = this._Federation1.Entity;
				if (((previousValue != value) 
							|| (this._Federation1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Federation1.Entity = null;
						previousValue.Licenses.Remove(this);
					}
					this._Federation1.Entity = value;
					if ((value != null))
					{
						value.Licenses.Add(this);
						this._FederationId = value.Id;
					}
					else
					{
						this._FederationId = default(System.Guid);
					}
					this.SendPropertyChanged("Federation1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TypeLicense_License", Storage="_TypeLicense", ThisKey="TypeId", OtherKey="Id", IsForeignKey=true)]
		public TypeLicense TypeLicense
		{
			get
			{
				return this._TypeLicense.Entity;
			}
			set
			{
				TypeLicense previousValue = this._TypeLicense.Entity;
				if (((previousValue != value) 
							|| (this._TypeLicense.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TypeLicense.Entity = null;
						previousValue.Licenses.Remove(this);
					}
					this._TypeLicense.Entity = value;
					if ((value != null))
					{
						value.Licenses.Add(this);
						this._TypeId = value.Id;
					}
					else
					{
						this._TypeId = default(System.Guid);
					}
					this.SendPropertyChanged("TypeLicense");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Person_License", Storage="_Person", ThisKey="PersonId", OtherKey="Id", IsForeignKey=true)]
		public Person Person
		{
			get
			{
				return this._Person.Entity;
			}
			set
			{
				Person previousValue = this._Person.Entity;
				if (((previousValue != value) 
							|| (this._Person.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Person.Entity = null;
						previousValue.Licenses.Remove(this);
					}
					this._Person.Entity = value;
					if ((value != null))
					{
						value.Licenses.Add(this);
						this._PersonId = value.Id;
					}
					else
					{
						this._PersonId = default(System.Guid);
					}
					this.SendPropertyChanged("Person");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.LicenseCounter")]
	public partial class LicenseCounter : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _Id;
		
		private int _Number;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(System.Guid value);
    partial void OnIdChanged();
    partial void OnNumberChanging(int value);
    partial void OnNumberChanged();
    #endregion
		
		public LicenseCounter()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Number", DbType="Int NOT NULL")]
		public int Number
		{
			get
			{
				return this._Number;
			}
			set
			{
				if ((this._Number != value))
				{
					this.OnNumberChanging(value);
					this.SendPropertyChanging();
					this._Number = value;
					this.SendPropertyChanged("Number");
					this.OnNumberChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Person")]
	public partial class Person : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _Id;
		
		private string _FirstName;
		
		private string _LastName;
		
		private EntitySet<License> _Licenses;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(System.Guid value);
    partial void OnIdChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    #endregion
		
		public Person()
		{
			this._Licenses = new EntitySet<License>(new Action<License>(this.attach_Licenses), new Action<License>(this.detach_Licenses));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Person_License", Storage="_Licenses", ThisKey="Id", OtherKey="PersonId")]
		public EntitySet<License> Licenses
		{
			get
			{
				return this._Licenses;
			}
			set
			{
				this._Licenses.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Licenses(License entity)
		{
			this.SendPropertyChanging();
			entity.Person = this;
		}
		
		private void detach_Licenses(License entity)
		{
			this.SendPropertyChanging();
			entity.Person = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Team")]
	public partial class Team : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _Id;
		
		private string _Name;
		
		private System.Guid _ClubId;
		
		private EntityRef<Club> _Club;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(System.Guid value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnClubIdChanging(System.Guid value);
    partial void OnClubIdChanged();
    #endregion
		
		public Team()
		{
			this._Club = default(EntityRef<Club>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClubId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid ClubId
		{
			get
			{
				return this._ClubId;
			}
			set
			{
				if ((this._ClubId != value))
				{
					if (this._Club.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnClubIdChanging(value);
					this.SendPropertyChanging();
					this._ClubId = value;
					this.SendPropertyChanged("ClubId");
					this.OnClubIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Club_Team", Storage="_Club", ThisKey="ClubId", OtherKey="Id", IsForeignKey=true)]
		public Club Club
		{
			get
			{
				return this._Club.Entity;
			}
			set
			{
				Club previousValue = this._Club.Entity;
				if (((previousValue != value) 
							|| (this._Club.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Club.Entity = null;
						previousValue.Teams.Remove(this);
					}
					this._Club.Entity = value;
					if ((value != null))
					{
						value.Teams.Add(this);
						this._ClubId = value.Id;
					}
					else
					{
						this._ClubId = default(System.Guid);
					}
					this.SendPropertyChanged("Club");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
